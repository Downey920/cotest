#include <iostream>
#include <vector>
#include <queue>
#define INF 1000000000;

using namespace std;

int d[1001];
vector<pair<int, int>> v[1001];
void dijkstra(int start) {
	d[start] = 0;
	priority_queue<pair<int, int>> pq;
	pq.push({ 0, start });

	while (!pq.empty()) {
		int current = pq.top().second;
		int distance = -pq.top().first;
		pq.pop();

		for (int i = 0; i < v[current].size(); i++) {
			int next = v[current][i].first;
			int nextDistance = distance + v[current][i].second;

			if (d[next] > nextDistance) {
				d[next] = nextDistance;
				pq.push({ -nextDistance, next });
			}
		}
	}
}

int main() {
	int N, M, start, end;
	cin >> N >> M;

	for (int i = 0; i < M; i++) {
		int a, b, c;
		cin >> a >> b >> c;
		v[a].push_back({ b,c });
	}

	cin >> start >> end;

	for (int i = 1; i <= N; i++) {
		d[i] = INF;
	}

	dijkstra(start);

	cout << d[end];
	return 0;
}
