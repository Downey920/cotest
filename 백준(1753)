#include <iostream>
#include <queue>
#include <vector>

using namespace std;

int V, N, K;
int INF = 1000000000;

vector<pair<int, int>> g[20001];
int d[20001];

void dijkstra(int start) {
	d[start] = 0;
	priority_queue<pair<int, int>, vector<pair<int,int>>, greater<pair<int,int>>> pq;
	pq.push({ 0, start });

	while (!pq.empty()) {
		int cur = pq.top().second;
		int dis = pq.top().first;
		pq.pop();

		if (d[cur] < dis) continue;
		for(int i = 0; i < g[cur].size(); i++) {
			int next = g[cur][i].first;
			int nextDis = dis + g[cur][i].second;

			if (nextDis < d[next]) {
				d[next] = nextDis;
				pq.push({ nextDis, next });
			}
		}
	}
}

int main() {
	int a, b, c;
	cin >> V >> N >> K;

	for (int i = 1; i <= V; i++) {
		d[i] = INF;
	}

	for (int i = 0; i < N; i++) {
		cin >> a >> b >> c;
		g[a].push_back({ b,c });
	}

	dijkstra(K);

	for (int i = 1; i <= V; i++) {
		if (d[i] == 1000000000) {
			cout << "INF" << "\n";
		}
		else {
			cout << d[i] << "\n";
		}
	}

	return 0;
}
