#include <string>
#include <vector>
#include <queue>

using namespace std;

int visit[101][101];
int x[2] = {0, 1};
int y[2] = {1, 0};
int cnt = 0;
void bfs(int a, int b, int m, int n) {
    queue<pair<int,int>> q;
    q.push({a,b});
    visit[a][b] = 1;
    
    while(!q.empty()) {
        int aa = q.front().first;
        int bb = q.front().second;
        q.pop();
        for(int i = 0; i < 2; i++) {
            int naa = aa + x[i];
            int nbb = bb + y[i];
            if(naa > 0 && naa <= m && nbb > 0 && nbb <= n) {
                if(!visit[naa][nbb]) {
                    q.push({naa, nbb});
                    visit[naa][nbb] = visit[aa][bb] + 1;
                }
            }
        }
    }
}

void dfs(int a, int b, int m, int n) {
    if(a == m && b == n) {
        cnt++;
        return;
    }
    for(int i = 0; i < 2; i++) {
        int na = a + x[i];
        int nb = b + y[i];
        if(na > 0 && na <= m && nb > 0 && nb <= n) {
            if(visit[na][nb] == visit[a][b] + 1) {
                dfs(na,nb, m, n);
            }   
        }
    }
}
int solution(int m, int n, vector<vector<int>> puddles) {
    int answer = 0;
    for(int i = 0; i < puddles.size(); i++) {
        visit[puddles[i][0]][puddles[i][1]] = 1;
    }
    bfs(1,1,m,n);
    dfs(1,1,m,n);
    return answer = cnt;
}
